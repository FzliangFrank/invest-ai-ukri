[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Invest in AI Executive Summary",
    "section": "",
    "text": "Code\nprint(\"Hello Panel!\")\n\n\n[1] \"Hello Panel!\""
  },
  {
    "objectID": "01-get-data.html",
    "href": "01-get-data.html",
    "title": "Getting Data",
    "section": "",
    "text": "Overview\nnote: code in this notebook are written in python\nThere are two data source:\n\ncsv file downloaded directly from GTR website;\nFor project description, from GTR api;\nAdditional coordinate data using open-api;\n\nAlthough from step1 and step2 we are able to get same number of data, only 86.05% can join.\n\n\nlibrary and setup\nimport requests\nimport pandas as pd\nfrom IPython.display import display\n\n\n## define a function to check interactivity\n## so when render this document code take too long don't have to re-run everytime \nimport os\ndef is_interactive():\n   return 'SHLVL' not in os.environ\nprint('Interactive?', is_interactive())\n\n## Parameter\nSEARCH_TERM=\"artificial intelligence\"\nMAX_RESULTS=5175 # gathered by direct search \nURL = \"https://gtr.ukri.org/gtr/api/projects.json?sf=pro.sd&so=A\" # sort by project start date Decending (D) Acending(A)\n\nprint(f'Gathering data related to term \"{SEARCH_TERM}\", this has {MAX_RESULTS} results')\n\n\nInteractive? False\nGathering data related to term \"artificial intelligence\", this has 5175 results\n\n\n\n\nFrom Download\n\n\n\nSearch term “aritificial intelligence” has option to download csv\n\n\n\n\nexample of the donwload\ncsv_export = pd.read_csv('data/projectsearch-1709481069771.csv')\ndisplay(csv_export.sample(3))\n\n\n\n\n\n\n\n\n\n\nFundingOrgName\nProjectReference\nLeadROName\nDepartment\nProjectCategory\nPISurname\nPIFirstName\nPIOtherNames\nPI ORCID iD\nStudentSurname\n...\nEndDate\nAwardPounds\nExpenditurePounds\nRegion\nStatus\nGTRProjectUrl\nProjectId\nFundingOrgId\nLeadROId\nPIId\n\n\n\n\n4563\nEPSRC\nEP/J004995/1\nUniversity of Southampton\nSch of Psychology\nResearch Grant\nStevenage\nSarah\nNaN\nhttp://orcid.org/0000-0003-4155-2939\nNaN\n...\n31/03/2015\n1905242.0\nNaN\nSouth East\nClosed\nhttp://internal-gtr-tomcat-alb-611010599.eu-we...\n3A9209F6-2171-40B6-81DF-7B7FA3A60BE9\n798CB33D-C79E-4578-83F2-72606407192C\n64EDCEB7-556D-4890-9582-FD894F98C10D\nCC2AA4E5-9A40-4183-8E37-F57B1D16C58E\n\n\n1113\nEPSRC\n2586026\nUniversity of Edinburgh\nSch of Engineering\nStudentship\nNaN\nNaN\nNaN\nNaN\nDenker\n...\n31/03/2026\n0.0\nNaN\nScotland\nActive\nhttp://internal-gtr-tomcat-alb-611010599.eu-we...\n3CFC5385-F757-4FCF-939E-1CB7AD8FD0C9\n798CB33D-C79E-4578-83F2-72606407192C\nA4735E0B-ED6E-4FC5-9497-CFE564317F54\nNaN\n\n\n1343\nEPSRC\nEP/V002910/2\nUniversity of Oxford\nComputer Science\nFellowship\nFlaxman\nSeth\nNaN\nNaN\nNaN\n...\n30/09/2025\n1175698.0\nNaN\nSouth East\nActive\nhttp://internal-gtr-tomcat-alb-611010599.eu-we...\n9D0C3647-2297-4F81-9ABA-00446763A6CE\n798CB33D-C79E-4578-83F2-72606407192C\n47649064-FCD1-4D7A-A5AA-31B69B9BDFFC\nDE5C4E50-0D4C-4F2C-B56C-07CFA4B197C2\n\n\n\n\n3 rows × 25 columns\n\n\n\n\nUnfortunately this csv export don’t contain project description. So we are manually extract this data using the API call.\n\n\nFrom API\n\n\ngathering project description\n# GTR end-point\nif is_interactive():\n  print(\"Interactive context, fetch live data\")\n  ## Initialize a Data Frame\n  df = pd.DataFrame(columns = ['id', \"title\", \"abstractText\", \"techAbstractText\",\"potentialImpact\"])\n  i = int()\n  for i in range(1, MAX_RESULTS // 25 + 1):\n      parameters = {\n          \"q\":SEARCH_TERM,\n          \"s\":25,\n          \"p\":i\n          # \"f\":\"pro.rt\" # search in project topic \n      }\n      \n      response = requests.get(URL, params = parameters)\n      x = response.json()\n      dfx = pd.DataFrame.from_dict(x['project'])[[\"id\",\"title\",\"abstractText\",\"techAbstractText\",'potentialImpact']]\n      df = pd.concat([df,dfx])\n      \n      ## Save data.frame into a parquet \n      df.to_parquet('data/gtr.parquet')\n      api_export = df\nelse:\n  print(\"Skipping intractive\")\n  api_export = pd.read_parquet(\"data/gtr.parquet\")\n\n\nSkipping intractive\n\n\n\n\nSample Data\ndisplay(api_export.sample(3))\n\n\n\n\n\n\n\n\n\n\nid\ntitle\nabstractText\ntechAbstractText\npotentialImpact\n\n\n\n\n4\n09CD9411-F64E-4688-918A-7D1077110956\nArtificial Intelligence in Engineering Managem...\nThe focus of this project is the production of...\nNone\nNone\n\n\n6\nA68707CB-C002-4970-8D02-D4F8F6E220C2\nIntegrating hospital outpatient letters into t...\nThe importance of analysing health data collec...\nNone\nNone\n\n\n2\n257429F2-881F-4EF2-BBBF-7D9C7F745CFD\nNanoengineering of bacteria to sense and contr...\nBioelectrochemical systems (BESs) are capable ...\nNone\nNone\n\n\n\n\n\n\n\n\n\n\nData Quality\n\n\nBasic Validations\n## check api export\nassert api_export.shape[0] == api_export.id.unique().shape[0], \"Check `field id` is unique\"\n\n## check csv export\nassert csv_export.shape[0] == csv_export.ProjectId.unique().shape[0], \"Check `field id` ProjectID is unique\"\n\n## check relationships\n## check if csv and api call returned same number of rows\nassert api_export.shape[0] - csv_export.shape[0] == 0, \"API and manual search result return the same rows\"\n\n\n\n\njoin key check\nfrom numpy import intersect1d, setdiff1d\n\napi_id = api_export.id.values\ncsv_id = csv_export.ProjectId.values\n\ncommon = intersect1d(api_id,csv_id,assume_unique=True)\napi_extra = setdiff1d(api_id,csv_id,assume_unique=True)\ncsv_extra = setdiff1d(csv_id, api_id,assume_unique=True)\n\nprint(f'''\nWe can join {((common.shape[0] / csv_export.shape[0]) * 100):.02f} % of data\n\nDetails here:\n- {common.shape[0]} can join;\n- {api_extra.shape[0]} extra projects from api;\n- {csv_extra.shape[0]} extra projects from csv download;\n''')\n\n\n\nWe can join 86.05 % of data\n\nDetails here:\n- 4453 can join;\n- 722 extra projects from api;\n- 722 extra projects from csv download;\n\n\n\n\n\nCode\n## Example of extra API export\ndisplay(api_export.query(\"id.isin(@api_extra)\").sample(3))\n\n\n\n\n\n\n\n\n\n\nid\ntitle\nabstractText\ntechAbstractText\npotentialImpact\n\n\n\n\n5\n109803F3-BB3E-48C5-8C97-1F317B3C0CCD\nJustified Assessments of Service Provider Repu...\nJustified Assessments of Service Provider Repu...\nNone\nDecisions on which providers to use for partic...\n\n\n4\nBABA1A5E-9CB5-4CA2-96CF-D36EFF8B89EB\nUKRI Trustworthy Autonomous Systems Node in Trust\nEngineered systems are increasingly being used...\nNone\nNone\n\n\n21\nD598754F-98C8-4CD5-BD85-ED185C1ECB1F\nUnifying audio signal processing and machine l...\nModern technology is leading to a flood of aud...\nNone\nThe signal processing and machine learning met...\n\n\n\n\n\n\n\n\n\n\nCode\n## Example of extra CSV export\ndisplay(csv_export.query(\"ProjectId.isin(@csv_extra)\").sample(3))\n\n\n\n\n\n\n\n\n\n\nFundingOrgName\nProjectReference\nLeadROName\nDepartment\nProjectCategory\nPISurname\nPIFirstName\nPIOtherNames\nPI ORCID iD\nStudentSurname\n...\nEndDate\nAwardPounds\nExpenditurePounds\nRegion\nStatus\nGTRProjectUrl\nProjectId\nFundingOrgId\nLeadROId\nPIId\n\n\n\n\n3192\nInnovate UK\n10064969\nTHEMA AI LIMITED\nNaN\nCollaborative R&D\nMaccabe\nFinn\nNaN\nNaN\nNaN\n...\n31/07/2023\n45379.0\nNaN\nSouth East\nClosed\nhttp://internal-gtr-tomcat-alb-611010599.eu-we...\n38BD09D8-7403-49B6-98FD-6529596F8011\n1308DB9B-A8CB-43DC-8754-A44B2F23F8E8\nA52DF872-A4AE-4C98-95AA-0A585DF95588\n2BFB5E62-6784-416D-81C5-97CC0D9B9DFC\n\n\n476\nNERC\nNE/X01049X/1\nCardiff University\nSchool of Biosciences\nResearch Grant\nPerkins\nSarah\nNaN\nNaN\nNaN\n...\n30/04/2024\n80604.0\nNaN\nUnknown\nActive\nhttp://internal-gtr-tomcat-alb-611010599.eu-we...\n5EDF9C9D-4377-4C6F-B68D-2ED97C3653FE\n8A03ED41-E67D-4F4A-B5DD-AAFB272B6471\n052DE517-F298-4593-869D-03FE4A87442A\nA97539CC-A9E7-4F65-93AF-1F384A778583\n\n\n70\nInnovate UK\n83004296\nIAM COMPLIANT LIMITED\nNaN\nInnovation Loans\nShepstone\nClare\nNaN\nNaN\nNaN\n...\n28/02/2025\n598136.0\nNaN\nNorth West\nActive\nhttp://internal-gtr-tomcat-alb-611010599.eu-we...\n242FF645-7E4C-4231-8017-36FB675D6852\n1308DB9B-A8CB-43DC-8754-A44B2F23F8E8\nDA6200B0-60DD-4DB3-9AE0-3202C5516F83\nA7FAE508-CF50-4A04-88FC-683F0D07BEA3\n\n\n\n\n3 rows × 25 columns",
    "crumbs": [
      "Home",
      "Getting Data",
      "Getting Data"
    ]
  },
  {
    "objectID": "02.html",
    "href": "02.html",
    "title": "Trend and Elit Project",
    "section": "",
    "text": "setup and load data\nrequire(readr)\nrequire(arrow)\nrequire(tidyverse)\nrequire(lubridate)\nrequire(tidyr)\nrequire(scales)\nrequire(plotly)\nrequire(ggtext)\n\nsource(\"set_graphic.R\")\ncsv_export=read_csv('data/projectsearch-1709481069771.csv')\napi_export=arrow::read_parquet('data/gtr.parquet')\n## clean parse date\ngtr = csv_export |&gt; \n  mutate(across(c(StartDate, EndDate), ~as.Date(.x, '%d/%m/%Y')))\n\n\n\nExplore Trend\n\nAbsolute NumberAward\n\n\n\n\nCode\ngtr |&gt; plot_freq(n()) + \n  ylab(\"Number of Project\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ngtr |&gt; \n  plot_freq(sum(AwardPounds,na.rm=T)) + \n  ylab(\"Total Award Sumed\") +\n  labs(caption=\"This plot may be useful if funding were allocated all at the start of the year\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExplore Elite (Most Expensive) Projects\n\n\nCode\nrequire(htmlwidgets)\n\n\nLoading required package: htmlwidgets\n\n\nCode\n## parameter\nSNOBYNESS=0.02 ## this is top n most expensive\nPRICE_FORMULAR=quo(\n  AwardPounds/as.numeric(duration, units='days') ## this is how you calculate expensiveness\n) \n\n## calculate award per year \nprice_gtr = gtr |&gt; \n  mutate(duration = EndDate - StartDate) |&gt;\n  mutate(duration_d = as.numeric(duration, units='days')) |&gt; \n  mutate(price = !! PRICE_FORMULAR) |&gt; \n  arrange(desc(price)) |&gt; \n  mutate(expensive_rank = row_number()) |&gt;\n  filter(expensive_rank &lt;= quantile(expensive_rank, SNOBYNESS))\n\ng &lt;- price_gtr |&gt;\n  ggplot(aes(y = price, label = LeadROName, label1= Title, label2 = ProjectReference)) + \n  geom_linerange(aes(xmin = StartDate, xmax = EndDate, y = price, alpha = duration_d), \n                 color = \"darkgrey\") +\n  geom_point(aes(x = StartDate), color = \"blue\") + \n  geom_point(aes(x = EndDate), color = \"navy\") +\n  ggtitle(glue::glue(\"Here are the top {SNOBYNESS * 100}% most expensive AI projects\")) +\n  scale_alpha_continuous(trans='log')\n\nggplotly(g) |&gt;\n  style(traces = 2, text = paste(price_gtr$StartDate,\"\\n\",price_gtr$duration, \"days\")) |&gt;\n  style(traces = 1, text = paste( price_gtr$PIFirstName, price_gtr$PISurname,\"\\n\",price_gtr$duration, \"days\")) |&gt;\n  style(traces = 3, customdata = price_gtr$GTRProjectUrl, text = paste(price_gtr$EndDate,\"\\n\", price_gtr$LeadROName, \"\\n\",price_gtr$Title)) |&gt;\n  onRender(\"\n    function(el) { \n      el.on('plotly_click', function(d) { \n        var url = d.points[0].customdata;\n        window.open(url);\n      });\n    }\n  \") #set up click event that open URL",
    "crumbs": [
      "Home",
      "Analysis",
      "Trend and Elit Project"
    ]
  }
]